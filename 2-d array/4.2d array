status:do 1,5,7,8
# Assignment Questions 4

<aside>
ðŸ’¡ **Question 2**

Given two **0-indexed** integer arrays nums1 and nums2, return *a list* answer *of size* 2 *where:*

- answer[0] *is a list of all **distinct** integers in* nums1 *which are **not** present in* nums2*.*
- answer[1] *is a list of all **distinct** integers in* nums2 *which are **not** present in* nums1.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = [1,2,3], nums2 = [2,4,6]

**Output:** [[1,3],[4,6]]

**Explanation:**

For nums1, nums1[1] = 2 is present at index 0 of nums2, whereas nums1[0] = 1 and nums1[2] = 3 are not present in nums2. Therefore, answer[0] = [1,3].

For nums2, nums2[0] = 2 is present at index 1 of nums1, whereas nums2[1] = 4 and nums2[2] = 6 are not present in nums2. Therefore, answer[1] = [4,6].


//hint:create the set where the store the unique value of the number then get the which number not equal to the another array

function findDistinctIntegers(num1, num2) {
const set1=new Set(num1);
const set2=new Set(num2);
const answer = [[], []];
//iterate over the num1 then get the number where the which is not present from th set 2  
for(const num of num1){
    if(!set2.has(num)){
        answer[0].push(num);
    }
}
for(const num of num2){
    if(!set1.has(num)){
    answer[1].push(num)
}
}
return answer;
}
const nums1 = [1, 2, 3];
const nums2 = [2, 4, 6];
const distinctIntegers = findDistinctIntegers(nums1, nums2);
console.log(distinctIntegers); // Output: [[1, 3], [4, 6]]
</aside>



aside>
ðŸ’¡ **Question 6**
Given an integer array nums sorted in **non-decreasing** order, return *an array of **the squares of each number** sorted in non-decreasing order*.

**Example 1:**

Input: nums = [-4,-1,0,3,10]

Output: [0,1,9,16,100]

**Explanation:** After squaring, the array becomes [16,1,0,9,100].
After sorting, it becomes [0,1,9,16,100]


//hint:try to find the value of the irrespective of the +ve and -ve then square
//get the value irrespecive of +ve or -ve

//change the pointer where the after get the value of the big number
//create the array where the resultant store that array
function sortedsquares(nums){
const result=[];
//create the left and right pointer in array
let left=0;
let right=nums.length-1;
//get the absolute value
while(left<=right){
    const leftvalue=Math.abs(nums[left]);
    const rightvalue=Math.abs(nums[left]);

    if(leftvalue >= rightvalue){
        result.unshift(nums[left]*nums[left]);
        left++;
    }else{
        result.unshift(nums[right]*nums[right]);
        right--;
    }
    // while (left < nums.length) {
    //     result.unshift(nums[left] * nums[left]);
    //     left++;
   //   }
    
}
return result;
}

const nums = [15,-11,10,-12,-13];
const squaredNums = sortedsquares(nums);
console.log(squaredNums); 
//Math.abs(left) 
//Math.abs(right)

//if( leftvalue>rightvalue) 
//     leftpointer++;
//     else
//    rightpointer--; 
    
</aside>

<aside>
</aside>





ðŸ’¡ **Question 8**

Given the array nums consisting of 2n elements in the form [x1,x2,...,xn,y1,y2,...,yn].

*Return the array in the form* [x1,y1,x2,y2,...,xn,yn].

**Example 1:**

**Input:** nums = [2,5,1,3,4,7], n = 3

**Output:** [2,3,5,4,1,7]

**Explanation:** Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].


function shuffleArray(nums, n) {
    const result = [];
    for (let i = 0; i < n; i++) {
//get the ith and (i+n)th element shuffle theelement   
        result.push(nums[i]);
      result.push(nums[i + n]);
    }
    return result;
  }
  const nums = [2, 5, 1, 3, 4, 7];
const n = 3;
const output = shuffleArray(nums, n);
console.log(output);
</aside>



<
<aside>
ðŸ’¡ **Question 1**
Given three integer arrays arr1, arr2 and arr3 **sorted** in **strictly increasing** order, return a sorted array of **only** the integers that appeared in **all** three arrays.

**Example 1:**

Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]

Output: [1,5]

**Explanation:** Only 1 and 5 appeared in the three arrays.

</aside>

<aside>
ðŸ’¡ **Question 5**
You have n coins and you want to build a staircase with these coins. The staircase consists of k rows where the ith row has exactly i coins. The last row of the staircase **may be** incomplete.

Given the integer n, return *the number of **complete rows** of the staircase you will build*.

**Example 1:**

[]()

![v2.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4bd91cfa-d2b1-47b3-8197-a72e8dcfff4b/v2.jpg)

**Input:** n = 5

**Output:** 2

**Explanation:** Because the 3rd row is incomplete, we return 2.

<aside>
ðŸ’¡ **Question 7**
You are given an m x n matrix M initialized with all 0's and an array of operations ops, where ops[i] = [ai, bi] means M[x][y] should be incremented by one for all 0 <= x < ai and 0 <= y < bi.

Count and return *the number of maximum integers in the matrix after performing all the operations*

**Example 1:**

![q4.jpg](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/4d0890d0-7bc7-4f59-be8e-352d9f3c1c52/q4.jpg)

**Input:** m = 3, n = 3, ops = [[2,2],[3,3]]

**Output:** 4

**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.

</aside>



question :2,3




