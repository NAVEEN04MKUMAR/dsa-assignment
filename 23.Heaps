# Assignment Questions 23

<aside>
ðŸ’¡ Question-1:

Given preorder of a binary tree, calculate itsÂ **[depth(or height)](https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/)**Â [starting from depth 0]. The preorder is given as a string with two possible characters.

1. â€˜lâ€™ denotes the leaf
2. â€˜nâ€™ denotes internal node

The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can â€˜nâ€™ or â€˜lâ€™ or mix of both.

**Examples :**

Input  : nlnll
Output : 2
Explanation :

!https://media.geeksforgeeks.org/wp-content/uploads/btree1.png

Input  : nlnnlll
Output : 3

!https://media.geeksforgeeks.org/wp-content/uploads/dia2.png

</aside>

<aside>
ðŸ’¡ Question-2:

Given aÂ Binary tree, the task is to print theÂ **left view**Â of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.

**Examples:**

***Input:***

            4

          / Â  \

        5 Â  Â  2

             / Â  \

            3 Â  Â  1

           / Â \

          6 Â  Â 7

***Output:**Â 4 5 3 6*

**Explanation:**

!https://media.geeksforgeeks.org/wp-content/cdn-uploads/left-view.png

***Input:***

                    1

                  / Â  \

                2 Â  Â  Â  3

                 \

                   4

                     \

                        5

                           \

                             6

**Output:**Â 1 2 4 5 6

</aside>

<aside>
ðŸ’¡ Question-3:

Given a Binary Tree, print the Right view of it.

TheÂ right view of a Binary TreeÂ is a set of nodes visible when the tree is visited from the Right side.

**Examples:**

**Input:**

         1

      / Â  Â  \

   2 Â  Â   Â  Â 3

/ Â  \ Â  Â  Â  / Â \

4 Â  Â  5 Â  6 Â  Â 7

             \

               8

**Output**: 

Right view of the tree is 1 3 7 8

**Input:**

         1

       /

    8

  /

7

**Output**: 

Right view of the tree is 1 8 7

</aside>

<aside>
ðŸ’¡ Question-4:

Given a Binary Tree, The task is to print theÂ **bottom view**Â from left to right. A nodeÂ **x**Â is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.

**Examples:**

**Input:**

             20

           / Â  Â  \

        8 Â  Â  Â  Â  22

    / Â  Â  Â \ Â  Â  Â  Â  \

5 Â  Â  Â  Â  3 Â  Â  Â  Â 25

        / Â  Â \

   10 Â  Â  Â  14

**Output:**Â 5, 10, 3, 14, 25.

**Input:**

             20

           / Â  Â  \

        8 Â  Â  Â  Â  22

    / Â  Â  Â \ Â  Â  Â / Â  \

 5 Â  Â  Â  Â  3 Â   4 Â  Â  25

         / Â  Â \

     10 Â  Â  Â  14

**Output:**

5 10 4 14 25.

**Explanation:**

If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.

**3 and 4** are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.

</aside>
